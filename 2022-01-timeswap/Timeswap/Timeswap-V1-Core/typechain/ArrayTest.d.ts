/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ArrayTestInterface extends ethers.utils.Interface {
  functions: {
    "duesStorage(uint256)": FunctionFragment;
    "insert(tuple[],tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "duesStorage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insert",
    values: [
      {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      }[],
      { debt: BigNumberish; collateral: BigNumberish; startBlock: BigNumberish }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "duesStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "insert", data: BytesLike): Result;

  events: {};
}

export class ArrayTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ArrayTestInterface;

  functions: {
    duesStorage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        debt: BigNumber;
        collateral: BigNumber;
        startBlock: number;
      }
    >;

    "duesStorage(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        debt: BigNumber;
        collateral: BigNumber;
        startBlock: number;
      }
    >;

    insert(
      dues: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      }[],
      dueOut: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "insert(tuple[],(uint112,uint112,uint32))"(
      dues: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      }[],
      dueOut: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  duesStorage(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      debt: BigNumber;
      collateral: BigNumber;
      startBlock: number;
    }
  >;

  "duesStorage(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      debt: BigNumber;
      collateral: BigNumber;
      startBlock: number;
    }
  >;

  insert(
    dues: {
      debt: BigNumberish;
      collateral: BigNumberish;
      startBlock: BigNumberish;
    }[],
    dueOut: {
      debt: BigNumberish;
      collateral: BigNumberish;
      startBlock: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "insert(tuple[],(uint112,uint112,uint32))"(
    dues: {
      debt: BigNumberish;
      collateral: BigNumberish;
      startBlock: BigNumberish;
    }[],
    dueOut: {
      debt: BigNumberish;
      collateral: BigNumberish;
      startBlock: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    duesStorage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        debt: BigNumber;
        collateral: BigNumber;
        startBlock: number;
      }
    >;

    "duesStorage(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        debt: BigNumber;
        collateral: BigNumber;
        startBlock: number;
      }
    >;

    insert(
      dues: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      }[],
      dueOut: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "insert(tuple[],(uint112,uint112,uint32))"(
      dues: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      }[],
      dueOut: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    duesStorage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "duesStorage(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insert(
      dues: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      }[],
      dueOut: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "insert(tuple[],(uint112,uint112,uint32))"(
      dues: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      }[],
      dueOut: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    duesStorage(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "duesStorage(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insert(
      dues: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      }[],
      dueOut: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "insert(tuple[],(uint112,uint112,uint32))"(
      dues: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      }[],
      dueOut: {
        debt: BigNumberish;
        collateral: BigNumberish;
        startBlock: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
