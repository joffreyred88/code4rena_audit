/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ArrayTest, ArrayTestInterface } from "../ArrayTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "duesStorage",
    outputs: [
      {
        internalType: "uint112",
        name: "debt",
        type: "uint112",
      },
      {
        internalType: "uint112",
        name: "collateral",
        type: "uint112",
      },
      {
        internalType: "uint32",
        name: "startBlock",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint112",
            name: "debt",
            type: "uint112",
          },
          {
            internalType: "uint112",
            name: "collateral",
            type: "uint112",
          },
          {
            internalType: "uint32",
            name: "startBlock",
            type: "uint32",
          },
        ],
        internalType: "struct IPair.Due[]",
        name: "dues",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "uint112",
            name: "debt",
            type: "uint112",
          },
          {
            internalType: "uint112",
            name: "collateral",
            type: "uint112",
          },
          {
            internalType: "uint32",
            name: "startBlock",
            type: "uint32",
          },
        ],
        internalType: "struct IPair.Due",
        name: "dueOut",
        type: "tuple",
      },
    ],
    name: "insert",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610421806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630936bcaa1461003b578063364ce03b1461007f575b600080fd5b61004e6100493660046102f7565b6100a0565b604080516001600160701b03948516815293909216602084015263ffffffff16908201526060015b60405180910390f35b61009261008d36600461020f565b6100e2565b604051908152602001610076565b600081815481106100b057600080fd5b6000918252602090912001546001600160701b038082169250600160701b82041690600160e01b900463ffffffff1683565b6000805b60005481101561010257806100fa8161030f565b9150506100e6565b5060005b8381101561017157600085858381811061013057634e487b7160e01b600052603260045260246000fd5b8354600181018555600094855260209094206060909102929092019291909101905061015c8282610336565b505080806101699061030f565b915050610106565b506000805460018101825590805282517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563820180546020860151604087015163ffffffff16600160e01b026001600160e01b036001600160701b03928316600160701b026001600160e01b031990941692909516919091179190911792909216919091179055949350505050565b803561020a816103d9565b919050565b60008060008385036080811215610224578384fd5b843567ffffffffffffffff8082111561023b578586fd5b818701915087601f83011261024e578586fd5b81358181111561025c578687fd5b886020606083028501011115610270578687fd5b60208301965094506060601f1984011215610289578384fd5b604051925060608301915082821081831117156102b457634e487b7160e01b84526041600452602484fd5b5060405260208501356102c6816103c1565b815260408501356102d6816103c1565b60208201526102e7606086016101ff565b6040820152809150509250925092565b600060208284031215610308578081fd5b5035919050565b600060001982141561032f57634e487b7160e01b81526011600452602481fd5b5060010190565b8135610341816103c1565b6001600160701b03811690508154816001600160701b03198216178355602084013561036c816103c1565b6dffffffffffffffffffffffffffff60701b60709190911b166001600160e01b031982811684178217855560408601356103a5816103d9565b60e01b166001600160e01b039390931617919091179091555050565b6001600160701b03811681146103d657600080fd5b50565b63ffffffff811681146103d657600080fdfea2646970667358221220fe3ec671493b50ced26948b63f2baa95da2ca7574497adc92bb35fb62f06d0d564736f6c63430008040033";

export class ArrayTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ArrayTest> {
    return super.deploy(overrides || {}) as Promise<ArrayTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ArrayTest {
    return super.attach(address) as ArrayTest;
  }
  connect(signer: Signer): ArrayTest__factory {
    return super.connect(signer) as ArrayTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArrayTestInterface {
    return new utils.Interface(_abi) as ArrayTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArrayTest {
    return new Contract(address, _abi, signerOrProvider) as ArrayTest;
  }
}
