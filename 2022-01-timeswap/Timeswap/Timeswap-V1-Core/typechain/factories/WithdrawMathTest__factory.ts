/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  WithdrawMathTest,
  WithdrawMathTestInterface,
} from "../WithdrawMathTest";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint128",
                name: "asset",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "collateral",
                type: "uint128",
              },
            ],
            internalType: "struct IPair.Tokens",
            name: "reserves",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "totalLiquidity",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "bond",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "insurance",
                type: "uint128",
              },
            ],
            internalType: "struct IPair.Claims",
            name: "totalClaims",
            type: "tuple",
          },
          {
            internalType: "uint120",
            name: "totalDebtCreated",
            type: "uint120",
          },
          {
            internalType: "uint112",
            name: "x",
            type: "uint112",
          },
          {
            internalType: "uint112",
            name: "y",
            type: "uint112",
          },
          {
            internalType: "uint112",
            name: "z",
            type: "uint112",
          },
        ],
        internalType: "struct IPair.State",
        name: "state",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "bondIn",
        type: "uint128",
      },
    ],
    name: "getAsset",
    outputs: [
      {
        internalType: "uint128",
        name: "assetOut",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint128",
                name: "asset",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "collateral",
                type: "uint128",
              },
            ],
            internalType: "struct IPair.Tokens",
            name: "reserves",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "totalLiquidity",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "bond",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "insurance",
                type: "uint128",
              },
            ],
            internalType: "struct IPair.Claims",
            name: "totalClaims",
            type: "tuple",
          },
          {
            internalType: "uint120",
            name: "totalDebtCreated",
            type: "uint120",
          },
          {
            internalType: "uint112",
            name: "x",
            type: "uint112",
          },
          {
            internalType: "uint112",
            name: "y",
            type: "uint112",
          },
          {
            internalType: "uint112",
            name: "z",
            type: "uint112",
          },
        ],
        internalType: "struct IPair.State",
        name: "state",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "insuranceIn",
        type: "uint128",
      },
    ],
    name: "getCollateral",
    outputs: [
      {
        internalType: "uint128",
        name: "collateralOut",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061048e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806357c5812a1461003b5780639d0f77d21461006a575b600080fd5b61004e610049366004610302565b61007d565b6040516001600160801b03909116815260200160405180910390f35b61004e610078366004610302565b610092565b6000610089838361009e565b90505b92915050565b6000610089838361010c565b6040820151518251516000916001600160801b039081169116106100c357508061008c565b8251516001600160801b03808416916100dd91168261040c565b6040850151519091506100f9906001600160801b0316826103ec565b90506101048161022a565b949350505050565b6040820151518251516000916001600160801b0390811691161061012f5761008c565b6040830151518351516001600160801b039182169161014f91168261042b565b90508360400151602001516001600160801b03168161016e919061040c565b604085015151855160200151610190916001600160801b03908116911661040c565b106101d957806101a96001600160801b0385168261040c565b6040860151519091506101c5906001600160801b0316826103ec565b90506101d08161022a565b9250505061008c565b8351602001516001600160801b03908116906101f79085168261040c565b90508460400151602001516001600160801b03168161021691906103ec565b90506102218161022a565b95945050505050565b806001600160801b038116811461024057600080fd5b919050565b600060408284031215610256578081fd5b6040516040810181811067ffffffffffffffff8211171561028557634e487b7160e01b83526041600452602483fd5b604052905080610294836102eb565b81526102a2602084016102eb565b60208201525092915050565b80356dffffffffffffffffffffffffffff8116811461024057600080fd5b80356effffffffffffffffffffffffffffff8116811461024057600080fd5b80356001600160801b038116811461024057600080fd5b600080828403610140811215610316578283fd5b61012080821215610325578384fd5b61032d6103b5565b91506103398686610245565b8252604085013560208301526103528660608701610245565b604083015261036360a086016102cc565b606083015261037460c086016102ae565b608083015261038560e086016102ae565b60a083015261039761010086016102ae565b60c08301528193506103aa8186016102eb565b925050509250929050565b60405160e0810167ffffffffffffffff811182821017156103e657634e487b7160e01b600052604160045260246000fd5b60405290565b60008261040757634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561042657610426610442565b500290565b60008282101561043d5761043d610442565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b5e45631eb37c49ea0c9f1928bd0d08b08bbc2371e14fe17fa71d15b5b50d13864736f6c63430008040033";

export class WithdrawMathTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<WithdrawMathTest> {
    return super.deploy(overrides || {}) as Promise<WithdrawMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): WithdrawMathTest {
    return super.attach(address) as WithdrawMathTest;
  }
  connect(signer: Signer): WithdrawMathTest__factory {
    return super.connect(signer) as WithdrawMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WithdrawMathTestInterface {
    return new utils.Interface(_abi) as WithdrawMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WithdrawMathTest {
    return new Contract(address, _abi, signerOrProvider) as WithdrawMathTest;
  }
}
