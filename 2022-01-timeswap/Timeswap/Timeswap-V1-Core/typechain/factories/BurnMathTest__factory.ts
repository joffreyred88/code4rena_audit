/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BurnMathTest, BurnMathTestInterface } from "../BurnMathTest";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint128",
                name: "asset",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "collateral",
                type: "uint128",
              },
            ],
            internalType: "struct IPair.Tokens",
            name: "reserves",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "totalLiquidity",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "bond",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "insurance",
                type: "uint128",
              },
            ],
            internalType: "struct IPair.Claims",
            name: "totalClaims",
            type: "tuple",
          },
          {
            internalType: "uint120",
            name: "totalDebtCreated",
            type: "uint120",
          },
          {
            internalType: "uint112",
            name: "x",
            type: "uint112",
          },
          {
            internalType: "uint112",
            name: "y",
            type: "uint112",
          },
          {
            internalType: "uint112",
            name: "z",
            type: "uint112",
          },
        ],
        internalType: "struct IPair.State",
        name: "state",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "liquidityIn",
        type: "uint256",
      },
    ],
    name: "getAsset",
    outputs: [
      {
        internalType: "uint128",
        name: "assetOut",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint128",
                name: "asset",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "collateral",
                type: "uint128",
              },
            ],
            internalType: "struct IPair.Tokens",
            name: "reserves",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "totalLiquidity",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "bond",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "insurance",
                type: "uint128",
              },
            ],
            internalType: "struct IPair.Claims",
            name: "totalClaims",
            type: "tuple",
          },
          {
            internalType: "uint120",
            name: "totalDebtCreated",
            type: "uint120",
          },
          {
            internalType: "uint112",
            name: "x",
            type: "uint112",
          },
          {
            internalType: "uint112",
            name: "y",
            type: "uint112",
          },
          {
            internalType: "uint112",
            name: "z",
            type: "uint112",
          },
        ],
        internalType: "struct IPair.State",
        name: "state",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "liquidityIn",
        type: "uint256",
      },
    ],
    name: "getCollateral",
    outputs: [
      {
        internalType: "uint128",
        name: "collateralOut",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105bc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806302c042b91461003b57806389febdc31461006a575b600080fd5b61004e6100493660046103f0565b61007d565b6040516001600160801b03909116815260200160405180910390f35b61004e6100783660046103f0565b610092565b6000610089838361009e565b90505b92915050565b600061008983836101cf565b8151602081015160408401515191516000926001600160801b03928316929081169116106100eb5760208401516100d89082908590610240565b90506100e3816102ee565b91505061008c565b6040840151518451516001600160801b039182169161010b911682610514565b90508460400151602001516001600160801b03168161012a91906104f5565b60408601515186516020015161014c916001600160801b0390811691166104f5565b1161015857505061008c565b6040850151602001518190610176906001600160801b0316826104f5565b6040870151519091506101939082906001600160801b0316610309565b905061019f8184610514565b92506101ba858760200151856102409092919063ffffffff16565b92506101c5836102ee565b9695505050505050565b6040820151518251516000916001600160801b039081169116116101f25761008c565b8251516040840151516001600160801b0391821691610212911682610514565b905061022d838560200151836102409092919063ffffffff16565b9050610238816102ee565b949350505050565b600080600061024f8686610333565b915091508060001415610274576000841161026957600080fd5b5082900490506102e7565b80841161028057600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b806001600160801b038116811461030457600080fd5b919050565b600061031582846104e1565b905060006103238385610546565b111561008c57806102388161052b565b6000806000198385098385029250828110838203039150509250929050565b600060408284031215610363578081fd5b6040516040810181811067ffffffffffffffff8211171561039257634e487b7160e01b83526041600452602483fd5b6040529050806103a1836103d9565b81526103af602084016103d9565b60208201525092915050565b80356dffffffffffffffffffffffffffff8116811461030457600080fd5b80356001600160801b038116811461030457600080fd5b600080828403610140811215610404578283fd5b61012080821215610413578384fd5b61041b6104aa565b91506104278686610352565b8252604085013560208301526104408660608701610352565b604083015260a08501356effffffffffffffffffffffffffffff81168114610466578485fd5b606083015261047760c086016103bb565b608083015261048860e086016103bb565b60a083015261049a61010086016103bb565b60c0830152909593013593505050565b60405160e0810167ffffffffffffffff811182821017156104db57634e487b7160e01b600052604160045260246000fd5b60405290565b6000826104f0576104f0610570565b500490565b600081600019048311821515161561050f5761050f61055a565b500290565b6000828210156105265761052661055a565b500390565b600060001982141561053f5761053f61055a565b5060010190565b60008261055557610555610570565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220ab987b20f59c396b68880cf6b469f45d1df7d27a32ac5ae9cc7fa683ac43ec2864736f6c63430008040033";

export class BurnMathTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BurnMathTest> {
    return super.deploy(overrides || {}) as Promise<BurnMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BurnMathTest {
    return super.attach(address) as BurnMathTest;
  }
  connect(signer: Signer): BurnMathTest__factory {
    return super.connect(signer) as BurnMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BurnMathTestInterface {
    return new utils.Interface(_abi) as BurnMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BurnMathTest {
    return new Contract(address, _abi, signerOrProvider) as BurnMathTest;
  }
}
