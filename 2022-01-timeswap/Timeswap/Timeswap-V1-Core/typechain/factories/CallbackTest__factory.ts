/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CallbackTest, CallbackTestInterface } from "../CallbackTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "collateral",
        type: "address",
      },
      {
        internalType: "uint112",
        name: "collateralIn",
        type: "uint112",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "borrow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint112",
        name: "assetIn",
        type: "uint112",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "lend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "asset",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "collateral",
        type: "address",
      },
      {
        internalType: "uint112",
        name: "assetIn",
        type: "uint112",
      },
      {
        internalType: "uint112",
        name: "collateralIn",
        type: "uint112",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "asset",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "assetIn",
        type: "uint128",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "pay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610961806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806319527efa146100515780632fcda38614610066578063721ea5ce14610079578063dd2bda431461008c575b600080fd5b61006461005f366004610686565b61009f565b005b610064610074366004610769565b6100b5565b61006461008736600461070a565b6100c7565b61006461009a36600461070a565b6100d3565b6100ad8686868686866100df565b505050505050565b6100c18484848461023e565b50505050565b6100c18484848461030f565b6100c1848484846103e0565b60006100f3876001600160a01b0316610479565b90506000610109876001600160a01b0316610479565b60405163eeda4c9f60e01b8152909150339063eeda4c9f9061013590899089908990899060040161085e565b600060405180830381600087803b15801561014f57600080fd5b505af1158015610163573d6000803e3d6000fd5b50505050600061017b896001600160a01b0316610479565b90506000610191896001600160a01b0316610479565b90506101a66001600160701b038916856108ae565b8210156101e75760405162461bcd60e51b81526004016101de90602080825260049082015263114ccc0d60e21b604082015260600190565b60405180910390fd5b6101fa6001600160701b038816846108ae565b8110156102325760405162461bcd60e51b81526004016101de906020808252600490820152634533303560e01b604082015260600190565b50505050505050505050565b6000610252856001600160a01b0316610479565b60405163c70449bf60e01b8152909150339063c70449bf9061027c9087908790879060040161088b565b600060405180830381600087803b15801561029657600080fd5b505af11580156102aa573d6000803e3d6000fd5b5050505060006102c2866001600160a01b0316610479565b90506102d76001600160801b038616836108ae565b8110156100ad5760405162461bcd60e51b81526004016101de90602080825260049082015263114ccc0d60e21b604082015260600190565b6000610323856001600160a01b0316610479565b6040516390e4d0b160e01b815290915033906390e4d0b19061034d90879087908790600401610832565b600060405180830381600087803b15801561036757600080fd5b505af115801561037b573d6000803e3d6000fd5b505050506000610393866001600160a01b0316610479565b90506103a86001600160701b038616836108ae565b8110156100ad5760405162461bcd60e51b81526004016101de906020808252600490820152634533303560e01b604082015260600190565b60006103f4856001600160a01b0316610479565b604051630886fef960e31b81529091503390634437f7c89061041e90879087908790600401610832565b600060405180830381600087803b15801561043857600080fd5b505af115801561044c573d6000803e3d6000fd5b505050506000610464866001600160a01b0316610479565b90506102d76001600160701b038616836108ae565b60408051306024808301919091528251808303909101815260449091018252602080820180516001600160e01b03166370a0823160e01b179052825160608101909352602d80845260009384936104e5939092906108ff908301396001600160a01b0386169190610502565b9050808060200190518101906104fb91906107a2565b9392505050565b6060833b61055e5760405162461bcd60e51b8152602060048201526024808201527f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e746044820152631c9858dd60e21b60648201526084016101de565b600080856001600160a01b03168560405161057991906107e3565b600060405180830381855afa9150503d80600081146105b4576040519150601f19603f3d011682016040523d82523d6000602084013e6105b9565b606091505b50915091506105c98282866105d3565b9695505050505050565b606083156105e25750816104fb565b8251156105f25782518084602001fd5b8160405162461bcd60e51b81526004016101de91906107ff565b60008083601f84011261061d578182fd5b50813567ffffffffffffffff811115610634578182fd5b60208301915083602082850101111561064c57600080fd5b9250929050565b80356001600160a01b038116811461066a57600080fd5b919050565b80356001600160701b038116811461066a57600080fd5b60008060008060008060a0878903121561069e578182fd5b6106a787610653565b95506106b560208801610653565b94506106c36040880161066f565b93506106d16060880161066f565b9250608087013567ffffffffffffffff8111156106ec578283fd5b6106f889828a0161060c565b979a9699509497509295939492505050565b6000806000806060858703121561071f578384fd5b61072885610653565b93506107366020860161066f565b9250604085013567ffffffffffffffff811115610751578283fd5b61075d8782880161060c565b95989497509550505050565b6000806000806060858703121561077e578384fd5b61078785610653565b935060208501356001600160801b0381168114610736578384fd5b6000602082840312156107b3578081fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600082516107f58184602087016108d2565b9190910192915050565b602081526000825180602084015261081e8160408501602087016108d2565b601f01601f19169190910160400192915050565b6001600160701b03841681526040602082015260006108556040830184866107ba565b95945050505050565b60006001600160701b038087168352808616602084015250606060408301526105c96060830184866107ba565b6001600160801b03841681526040602082015260006108556040830184866107ba565b600082198211156108cd57634e487b7160e01b81526011600452602481fd5b500190565b60005b838110156108ed5781810151838201526020016108d5565b838111156100c1575050600091015256fe62616c616e63654f662043616c6c20746f2049455243323020746f6b656e206e6f74207375636365737366756ca264697066735822122098fda4e44f1503cf964dbe4ca5f894c226ac67f2181cff54a45272a25f198b1064736f6c63430008040033";

export class CallbackTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CallbackTest> {
    return super.deploy(overrides || {}) as Promise<CallbackTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CallbackTest {
    return super.attach(address) as CallbackTest;
  }
  connect(signer: Signer): CallbackTest__factory {
    return super.connect(signer) as CallbackTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CallbackTestInterface {
    return new utils.Interface(_abi) as CallbackTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CallbackTest {
    return new Contract(address, _abi, signerOrProvider) as CallbackTest;
  }
}
