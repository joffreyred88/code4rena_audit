/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MintMathTest, MintMathTestInterface } from "../MintMathTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maturity",
        type: "uint256",
      },
      {
        internalType: "uint112",
        name: "zIncrease",
        type: "uint112",
      },
    ],
    name: "getCollateral",
    outputs: [
      {
        internalType: "uint112",
        name: "collateralIn",
        type: "uint112",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maturity",
        type: "uint256",
      },
      {
        internalType: "uint112",
        name: "xIncrease",
        type: "uint112",
      },
      {
        internalType: "uint112",
        name: "yIncrease",
        type: "uint112",
      },
    ],
    name: "getDebt",
    outputs: [
      {
        internalType: "uint112",
        name: "debtIn",
        type: "uint112",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maturity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidityTotal",
        type: "uint256",
      },
      {
        internalType: "uint16",
        name: "protocolFee",
        type: "uint16",
      },
    ],
    name: "getLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidityOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint112",
        name: "xIncrease",
        type: "uint112",
      },
    ],
    name: "getLiquidityTotal1",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidityTotal",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint128",
                name: "asset",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "collateral",
                type: "uint128",
              },
            ],
            internalType: "struct IPair.Tokens",
            name: "reserves",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "totalLiquidity",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "bond",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "insurance",
                type: "uint128",
              },
            ],
            internalType: "struct IPair.Claims",
            name: "totalClaims",
            type: "tuple",
          },
          {
            internalType: "uint120",
            name: "totalDebtCreated",
            type: "uint120",
          },
          {
            internalType: "uint112",
            name: "x",
            type: "uint112",
          },
          {
            internalType: "uint112",
            name: "y",
            type: "uint112",
          },
          {
            internalType: "uint112",
            name: "z",
            type: "uint112",
          },
        ],
        internalType: "struct IPair.State",
        name: "state",
        type: "tuple",
      },
      {
        internalType: "uint112",
        name: "xIncrease",
        type: "uint112",
      },
      {
        internalType: "uint112",
        name: "yIncrease",
        type: "uint112",
      },
      {
        internalType: "uint112",
        name: "zIncrease",
        type: "uint112",
      },
    ],
    name: "getLiquidityTotal2",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidityTotal",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061072d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806342c548321461005c5780634443dfa41461008c57806356c3ae34146100ad5780639651f4ca146100c0578063f9bcca72146100d3575b600080fd5b61006f61006a36600461059d565b6100e6565b6040516001600160701b0390911681526020015b60405180910390f35b61009f61009a366004610498565b6100fb565b604051908152602001610083565b61006f6100bb3660046105c8565b610112565b61009f6100ce366004610583565b610129565b61009f6100e1366004610603565b610147565b60006100f28383610154565b90505b92915050565b6000610109858585856101ab565b95945050505050565b600061011f848484610224565b90505b9392505050565b6000601082901b6fffffffffffffffffffffffffffff0000166100f5565b600061011f848484610273565b60008261016142826106af565b90506101766001600160701b03841682610690565b90506101838160196102b5565b90506101986001600160701b03841682610678565b90506101a3816102d0565b949350505050565b60006101096101df856001600160701b031687608001516001600160701b031688602001516102eb9092919063ffffffff16565b60a087015160208801516101ff916001600160701b0380891691166102eb565b60c0880151602089015161021f916001600160701b0380891691166102eb565b610398565b60008361023142826106af565b90506102466001600160701b03841682610690565b90506102538160206102b5565b90506102686001600160701b03851682610678565b9050610109816102d0565b60008361028042826106af565b905061029061ffff841682610690565b90506102a26501000000000082610678565b90506101098465010000000000836102eb565b60ff811682811c9081901b83146100f557806101a3816106c6565b806001600160701b03811681146102e657600080fd5b919050565b60008060006102fa86866103d9565b91509150806000141561031f576000841161031457600080fd5b508290049050610122565b80841161032b57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60008284111580156103aa5750818411155b156103b6575082610122565b8383111580156103c65750818311155b156103d2575081610122565b5092915050565b6000806000198385098385029250828110838203039150509250929050565b600060408284031215610409578081fd5b6040516040810181811067ffffffffffffffff8211171561043857634e487b7160e01b83526041600452602483fd5b60405290508061044783610478565b815261045560208401610478565b60208201525092915050565b80356001600160701b03811681146102e657600080fd5b80356fffffffffffffffffffffffffffffffff811681146102e657600080fd5b6000806000808486036101808112156104af578485fd5b610120808212156104be578586fd5b6104c6610641565b91506104d288886103f8565b8252604087013560208301526104eb88606089016103f8565b604083015260a08701356effffffffffffffffffffffffffffff81168114610511578687fd5b606083015261052260c08801610461565b608083015261053360e08801610461565b60a08301526105456101008801610461565b60c0830152819550610558818801610461565b945050506105696101408601610461565b91506105786101608601610461565b905092959194509250565b600060208284031215610594578081fd5b6100f282610461565b600080604083850312156105af578182fd5b823591506105bf60208401610461565b90509250929050565b6000806000606084860312156105dc578283fd5b833592506105ec60208501610461565b91506105fa60408501610461565b90509250925092565b600080600060608486031215610617578283fd5b8335925060208401359150604084013561ffff81168114610636578182fd5b809150509250925092565b60405160e0810167ffffffffffffffff8111828210171561067257634e487b7160e01b600052604160045260246000fd5b60405290565b6000821982111561068b5761068b6106e1565b500190565b60008160001904831182151516156106aa576106aa6106e1565b500290565b6000828210156106c1576106c16106e1565b500390565b60006000198214156106da576106da6106e1565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b2a29bc83aa6781743fae509cd885cbfdc2f8428945dd51793d1b351c50eba7864736f6c63430008040033";

export class MintMathTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MintMathTest> {
    return super.deploy(overrides || {}) as Promise<MintMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MintMathTest {
    return super.attach(address) as MintMathTest;
  }
  connect(signer: Signer): MintMathTest__factory {
    return super.connect(signer) as MintMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MintMathTestInterface {
    return new utils.Interface(_abi) as MintMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MintMathTest {
    return new Contract(address, _abi, signerOrProvider) as MintMathTest;
  }
}
