/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TimeswapPairCallee,
  TimeswapPairCalleeInterface,
} from "../TimeswapPairCallee";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maturity",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "assetTo",
        type: "address",
      },
      {
        internalType: "address",
        name: "dueTo",
        type: "address",
      },
      {
        internalType: "uint112",
        name: "xDecrease",
        type: "uint112",
      },
      {
        internalType: "uint112",
        name: "yIncrease",
        type: "uint112",
      },
      {
        internalType: "uint112",
        name: "zIncrease",
        type: "uint112",
      },
    ],
    name: "borrow",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint112",
            name: "debt",
            type: "uint112",
          },
          {
            internalType: "uint112",
            name: "collateral",
            type: "uint112",
          },
          {
            internalType: "uint32",
            name: "startBlock",
            type: "uint32",
          },
        ],
        internalType: "struct IPair.Due",
        name: "dueOut",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "factoryContract",
    outputs: [
      {
        internalType: "contract IFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "getData",
    outputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "getDataMint",
    outputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maturity",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "bondTo",
        type: "address",
      },
      {
        internalType: "address",
        name: "insuranceTo",
        type: "address",
      },
      {
        internalType: "uint112",
        name: "xIncrease",
        type: "uint112",
      },
      {
        internalType: "uint112",
        name: "yDecrease",
        type: "uint112",
      },
      {
        internalType: "uint112",
        name: "zDecrease",
        type: "uint112",
      },
    ],
    name: "lend",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "bond",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "insurance",
            type: "uint128",
          },
        ],
        internalType: "struct IPair.Claims",
        name: "claimsOut",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maturity",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "liquidityTo",
        type: "address",
      },
      {
        internalType: "uint112",
        name: "xIncrease",
        type: "uint112",
      },
      {
        internalType: "uint112",
        name: "yIncrease",
        type: "uint112",
      },
      {
        internalType: "uint112",
        name: "zIncrease",
        type: "uint112",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidityOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint112",
            name: "debt",
            type: "uint112",
          },
          {
            internalType: "uint112",
            name: "collateral",
            type: "uint112",
          },
          {
            internalType: "uint32",
            name: "startBlock",
            type: "uint32",
          },
        ],
        internalType: "struct IPair.Due",
        name: "dueOut",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pairContract",
    outputs: [
      {
        internalType: "contract IPair",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maturity",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint112[]",
        name: "assetsIn",
        type: "uint112[]",
      },
      {
        internalType: "uint112[]",
        name: "collateralsOut",
        type: "uint112[]",
      },
    ],
    name: "pay",
    outputs: [
      {
        internalType: "uint128",
        name: "assetIn",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "collateralOut",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint112",
        name: "collateralIn",
        type: "uint112",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "timeswapBorrowCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint112",
        name: "assetIn",
        type: "uint112",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "timeswapLendCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint112",
        name: "assetIn",
        type: "uint112",
      },
      {
        internalType: "uint112",
        name: "collateralIn",
        type: "uint112",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "timeswapMintCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "assetIn",
        type: "uint128",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "timeswapPayCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c06040523480156200001157600080fd5b5060405162001953380380620019538339810160408190526200003491620000dd565b806001600160a01b03166080816001600160a01b031660601b81525050806001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156200008b57600080fd5b505afa158015620000a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c69190620000dd565b60601b6001600160601b03191660a052506200011c565b600060208284031215620000ef578081fd5b8151620000fc8162000103565b9392505050565b6001600160a01b03811681146200011957600080fd5b50565b60805160601c60a05160601c6117b76200019c60003960008181610257015281816106d20152818161091b01528181610be20152610ceb0152600081816101420152818161029b0152818161033a0152818161045401528181610521015281816105c00152818161082901528181610a0f0152610ae601526117b76000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806390e4d0b11161007157806390e4d0b11461019d57806396211caa146101b0578063b71bfc8c14610205578063c70449bf1461023f578063de11c94a14610252578063eeda4c9f1461027957600080fd5b8063172fb294146100b957806333a897c3146100e257806338266b22146101155780634437f7c8146101285780634d709adf1461013d57806371ce3f0e1461017c575b600080fd5b6100cc6100c7366004610fdf565b61028c565b6040516100d99190611556565b60405180910390f35b6100f56100f036600461124f565b61044f565b604080516001600160801b039384168152929091166020830152016100d9565b6100cc610123366004610fdf565b610512565b61013b610136366004611141565b610690565b005b6101647f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d9565b61018f61018a36600461135c565b61080b565b6040516100d9929190611696565b61013b6101ab366004611141565b6108d9565b6101c36101be3660046113d4565b6109ef565b6040805193845260208085019390935281516001600160701b0390811685830152928201519092166060840152015163ffffffff16608082015260a0016100d9565b61021861021336600461135c565b610ad0565b6040805182516001600160801b0390811682526020938401511692810192909252016100d9565b61013b61024d3660046111f7565b610ba0565b6101647f000000000000000000000000000000000000000000000000000000000000000081565b61013b610287366004611194565b610ca5565b606060405180608001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102f257600080fd5b505afa158015610306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032a9190611022565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561039157600080fd5b505afa1580156103a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c99190611022565b6001600160a01b03168152602001836001600160a01b03168152602001836001600160a01b0316815250604051602001610439919081516001600160a01b039081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b6040516020818303038152906040529050919050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639ee33ef289898989898961049033610512565b6040518863ffffffff1660e01b81526004016104b29796959493929190611591565b6040805180830381600087803b1580156104cb57600080fd5b505af11580156104df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105039190611216565b91509150965096945050505050565b606060405180606001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561057857600080fd5b505afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190611022565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561061757600080fd5b505afa15801561062b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064f9190611022565b6001600160a01b0390811682528481166020928301526040805184518316818501529284015182168382015292909201519091166060820152608001610439565b600080806106a08486018661103e565b60405163e6a4390560e01b81526001600160a01b038085166004830152808416602483015293965091945092506000917f0000000000000000000000000000000000000000000000000000000000000000169063e6a439059060440160206040518083038186803b15801561071457600080fd5b505afa158015610728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074c9190611022565b9050336001600160a01b0382161461077f5760405162461bcd60e51b815260040161077690611569565b60405180910390fd5b6040516323b872dd60e01b81526001600160a01b038516906323b872dd906107af90859085908c9060040161152a565b602060405180830381600087803b1580156107c957600080fd5b505af11580156107dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108019190611002565b5050505050505050565b604080516060810182526000808252602082018190529181018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dccda5b889898989898961086533610512565b6040518863ffffffff1660e01b81526004016108879796959493929190611638565b608060405180830381600087803b1580156108a157600080fd5b505af11580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610503919061143b565b600080806108e98486018661103e565b60405163e6a4390560e01b81526001600160a01b038085166004830152808416602483015293965091945092506000917f0000000000000000000000000000000000000000000000000000000000000000169063e6a439059060440160206040518083038186803b15801561095d57600080fd5b505afa158015610971573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109959190611022565b9050336001600160a01b038216146109bf5760405162461bcd60e51b815260040161077690611569565b6040516323b872dd60e01b81526001600160a01b038416906323b872dd906107af90859085908c9060040161152a565b6040805160608101825260008082526020820181905291810182905281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636761f92c8989308a8a8a610a4b3361028c565b6040518863ffffffff1660e01b8152600401610a6d9796959493929190611638565b60a060405180830381600087803b158015610a8757600080fd5b505af1158015610a9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abf9190611467565b925092509250955095509592505050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b3466a68888888888888610b2233610512565b6040518863ffffffff1660e01b8152600401610b449796959493929190611638565b6040805180830381600087803b158015610b5d57600080fd5b505af1158015610b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9591906110e3565b979650505050505050565b60008080610bb08486018661103e565b60405163e6a4390560e01b81526001600160a01b038085166004830152808416602483015293965091945092506000917f0000000000000000000000000000000000000000000000000000000000000000169063e6a439059060440160206040518083038186803b158015610c2457600080fd5b505afa158015610c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5c9190611022565b6040516323b872dd60e01b81526001600160a01b03848116600483015280831660248301526001600160801b038a166044830152919250908516906323b872dd906064016107af565b6000808080610cb685870187611088565b60405163e6a4390560e01b81526001600160a01b038086166004830152808516602483015294985092965090945092506000917f0000000000000000000000000000000000000000000000000000000000000000169063e6a439059060440160206040518083038186803b158015610d2d57600080fd5b505afa158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d659190611022565b9050336001600160a01b03821614610d8f5760405162461bcd60e51b815260040161077690611569565b6040516323b872dd60e01b81526001600160a01b038616906323b872dd90610dbf90869085908e9060040161152a565b602060405180830381600087803b158015610dd957600080fd5b505af1158015610ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e119190611002565b506040516323b872dd60e01b81526001600160a01b038516906323b872dd90610e4290859085908d9060040161152a565b602060405180830381600087803b158015610e5c57600080fd5b505af1158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e949190611002565b50505050505050505050565b600082601f830112610eb0578081fd5b81356020610ec5610ec083611705565b6116d4565b80838252828201915082860187848660051b8901011115610ee4578586fd5b855b85811015610f0b578135610ef981611757565b84529284019290840190600101610ee6565b5090979650505050505050565b60008083601f840112610f29578182fd5b50813567ffffffffffffffff811115610f40578182fd5b602083019150836020828501011115610f5857600080fd5b9250929050565b600060608284031215610f70578081fd5b6040516060810181811067ffffffffffffffff82111715610f9357610f93611729565b80604052508091508251610fa681611757565b81526020830151610fb681611757565b6020820152604083015163ffffffff81168114610fd257600080fd5b6040919091015292915050565b600060208284031215610ff0578081fd5b8135610ffb8161173f565b9392505050565b600060208284031215611013578081fd5b81518015158114610ffb578182fd5b600060208284031215611033578081fd5b8151610ffb8161173f565b600080600060608486031215611052578182fd5b833561105d8161173f565b9250602084013561106d8161173f565b9150604084013561107d8161173f565b809150509250925092565b6000806000806080858703121561109d578081fd5b84356110a88161173f565b935060208501356110b88161173f565b925060408501356110c88161173f565b915060608501356110d88161173f565b939692955090935050565b6000604082840312156110f4578081fd5b6040516040810181811067ffffffffffffffff8211171561111757611117611729565b60405282516111258161176c565b815260208301516111358161176c565b60208201529392505050565b600080600060408486031215611155578081fd5b833561116081611757565b9250602084013567ffffffffffffffff81111561117b578182fd5b61118786828701610f18565b9497909650939450505050565b600080600080606085870312156111a9578182fd5b84356111b481611757565b935060208501356111c481611757565b9250604085013567ffffffffffffffff8111156111df578283fd5b6111eb87828801610f18565b95989497509550505050565b60008060006040848603121561120b578081fd5b83356111608161176c565b60008060408385031215611228578182fd5b82516112338161176c565b60208401519092506112448161176c565b809150509250929050565b60008060008060008060c08789031215611267578384fd5b8635955060208088013561127a8161173f565b9550604088013561128a8161173f565b9450606088013567ffffffffffffffff808211156112a6578485fd5b818a0191508a601f8301126112b9578485fd5b81356112c7610ec082611705565b8082825285820191508585018e878560051b88010111156112e6578889fd5b8895505b838610156113085780358352600195909501949186019186016112ea565b509750505060808a0135925080831115611320578485fd5b61132c8b848c01610ea0565b945060a08a0135925080831115611341578384fd5b505061134f89828a01610ea0565b9150509295509295509295565b60008060008060008060c08789031215611374578384fd5b8635955060208701356113868161173f565b945060408701356113968161173f565b935060608701356113a681611757565b925060808701356113b681611757565b915060a08701356113c681611757565b809150509295509295509295565b600080600080600060a086880312156113eb578283fd5b8535945060208601356113fd8161173f565b9350604086013561140d81611757565b9250606086013561141d81611757565b9150608086013561142d81611757565b809150509295509295909350565b6000806080838503121561144d578182fd5b8251915061145e8460208501610f5f565b90509250929050565b600080600060a0848603121561147b578081fd5b83519250602084015191506114938560408601610f5f565b90509250925092565b6000815180845260208085019450808401835b838110156114d45781516001600160701b0316875295820195908201906001016114af565b509495945050505050565b60008151808452815b81811015611504576020818501810151868301820152016114e8565b818111156115155782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0393841681529190921660208201526001600160701b03909116604082015260600190565b602081526000610ffb60208301846114df565b6020808252600e908201526d24b73b30b634b21039b2b73232b960911b604082015260600190565b8781526001600160a01b03878116602080840191909152908716604083015260e060608301819052865190830181905260009187810191610100850190845b818110156115ec578451835293830193918301916001016115d0565b50508481036080860152611600818961149c565b9250505082810360a0840152611616818661149c565b905082810360c084015261162a81856114df565b9a9950505050505050505050565b8781526001600160a01b038781166020830152861660408201526001600160701b0385811660608301528481166080830152831660a082015260e060c08201819052600090611689908301846114df565b9998505050505050505050565b82815260808101610ffb60208301846001600160701b038082511683528060208301511660208401525063ffffffff60408201511660408301525050565b604051601f8201601f1916810167ffffffffffffffff811182821017156116fd576116fd611729565b604052919050565b600067ffffffffffffffff82111561171f5761171f611729565b5060051b60200190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461175457600080fd5b50565b6001600160701b038116811461175457600080fd5b6001600160801b038116811461175457600080fdfea26469706673582212208cdc5c72e162b1967ac0854aa88d34aa27db0c312ccf399a3b9cccdf8faa38cc64736f6c63430008040033";

export class TimeswapPairCallee__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    pair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TimeswapPairCallee> {
    return super.deploy(pair, overrides || {}) as Promise<TimeswapPairCallee>;
  }
  getDeployTransaction(
    pair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(pair, overrides || {});
  }
  attach(address: string): TimeswapPairCallee {
    return super.attach(address) as TimeswapPairCallee;
  }
  connect(signer: Signer): TimeswapPairCallee__factory {
    return super.connect(signer) as TimeswapPairCallee__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TimeswapPairCalleeInterface {
    return new utils.Interface(_abi) as TimeswapPairCalleeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TimeswapPairCallee {
    return new Contract(address, _abi, signerOrProvider) as TimeswapPairCallee;
  }
}
