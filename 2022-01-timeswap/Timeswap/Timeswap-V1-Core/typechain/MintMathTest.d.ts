/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MintMathTestInterface extends ethers.utils.Interface {
  functions: {
    "getCollateral(uint256,uint112)": FunctionFragment;
    "getDebt(uint256,uint112,uint112)": FunctionFragment;
    "getLiquidity(uint256,uint256,uint16)": FunctionFragment;
    "getLiquidityTotal1(uint112)": FunctionFragment;
    "getLiquidityTotal2(tuple,uint112,uint112,uint112)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebt",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityTotal1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityTotal2",
    values: [
      {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityTotal1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityTotal2",
    data: BytesLike
  ): Result;

  events: {};
}

export class MintMathTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MintMathTestInterface;

  functions: {
    getCollateral(
      maturity: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralIn: BigNumber }>;

    "getCollateral(uint256,uint112)"(
      maturity: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralIn: BigNumber }>;

    getDebt(
      maturity: BigNumberish,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { debtIn: BigNumber }>;

    "getDebt(uint256,uint112,uint112)"(
      maturity: BigNumberish,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { debtIn: BigNumber }>;

    getLiquidity(
      maturity: BigNumberish,
      liquidityTotal: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidityOut: BigNumber }>;

    "getLiquidity(uint256,uint256,uint16)"(
      maturity: BigNumberish,
      liquidityTotal: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidityOut: BigNumber }>;

    getLiquidityTotal1(
      xIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidityTotal: BigNumber }>;

    "getLiquidityTotal1(uint112)"(
      xIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidityTotal: BigNumber }>;

    getLiquidityTotal2(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidityTotal: BigNumber }>;

    "getLiquidityTotal2(((uint128,uint128),uint256,(uint128,uint128),uint120,uint112,uint112,uint112),uint112,uint112,uint112)"(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidityTotal: BigNumber }>;
  };

  getCollateral(
    maturity: BigNumberish,
    zIncrease: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCollateral(uint256,uint112)"(
    maturity: BigNumberish,
    zIncrease: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDebt(
    maturity: BigNumberish,
    xIncrease: BigNumberish,
    yIncrease: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDebt(uint256,uint112,uint112)"(
    maturity: BigNumberish,
    xIncrease: BigNumberish,
    yIncrease: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidity(
    maturity: BigNumberish,
    liquidityTotal: BigNumberish,
    protocolFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLiquidity(uint256,uint256,uint16)"(
    maturity: BigNumberish,
    liquidityTotal: BigNumberish,
    protocolFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidityTotal1(
    xIncrease: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLiquidityTotal1(uint112)"(
    xIncrease: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidityTotal2(
    state: {
      reserves: { asset: BigNumberish; collateral: BigNumberish };
      totalLiquidity: BigNumberish;
      totalClaims: { bond: BigNumberish; insurance: BigNumberish };
      totalDebtCreated: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      z: BigNumberish;
    },
    xIncrease: BigNumberish,
    yIncrease: BigNumberish,
    zIncrease: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLiquidityTotal2(((uint128,uint128),uint256,(uint128,uint128),uint120,uint112,uint112,uint112),uint112,uint112,uint112)"(
    state: {
      reserves: { asset: BigNumberish; collateral: BigNumberish };
      totalLiquidity: BigNumberish;
      totalClaims: { bond: BigNumberish; insurance: BigNumberish };
      totalDebtCreated: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      z: BigNumberish;
    },
    xIncrease: BigNumberish,
    yIncrease: BigNumberish,
    zIncrease: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getCollateral(
      maturity: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateral(uint256,uint112)"(
      maturity: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebt(
      maturity: BigNumberish,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDebt(uint256,uint112,uint112)"(
      maturity: BigNumberish,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidity(
      maturity: BigNumberish,
      liquidityTotal: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidity(uint256,uint256,uint16)"(
      maturity: BigNumberish,
      liquidityTotal: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityTotal1(
      xIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidityTotal1(uint112)"(
      xIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityTotal2(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidityTotal2(((uint128,uint128),uint256,(uint128,uint128),uint120,uint112,uint112,uint112),uint112,uint112,uint112)"(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getCollateral(
      maturity: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateral(uint256,uint112)"(
      maturity: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebt(
      maturity: BigNumberish,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDebt(uint256,uint112,uint112)"(
      maturity: BigNumberish,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidity(
      maturity: BigNumberish,
      liquidityTotal: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidity(uint256,uint256,uint16)"(
      maturity: BigNumberish,
      liquidityTotal: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityTotal1(
      xIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidityTotal1(uint112)"(
      xIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityTotal2(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidityTotal2(((uint128,uint128),uint256,(uint128,uint128),uint120,uint112,uint112,uint112),uint112,uint112,uint112)"(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCollateral(
      maturity: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollateral(uint256,uint112)"(
      maturity: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebt(
      maturity: BigNumberish,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDebt(uint256,uint112,uint112)"(
      maturity: BigNumberish,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidity(
      maturity: BigNumberish,
      liquidityTotal: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidity(uint256,uint256,uint16)"(
      maturity: BigNumberish,
      liquidityTotal: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityTotal1(
      xIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityTotal1(uint112)"(
      xIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityTotal2(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityTotal2(((uint128,uint128),uint256,(uint128,uint128),uint120,uint112,uint112,uint112),uint112,uint112,uint112)"(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
