/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ConstantProductTestInterface extends ethers.utils.Interface {
  functions: {
    "checkConstantProduct(tuple,uint112,uint128,uint128)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkConstantProduct",
    values: [
      {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkConstantProduct",
    data: BytesLike
  ): Result;

  events: {};
}

export class ConstantProductTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ConstantProductTestInterface;

  functions: {
    checkConstantProduct(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xReserve: BigNumberish,
      yAdjusted: BigNumberish,
      zAdjusted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "checkConstantProduct(((uint128,uint128),uint256,(uint128,uint128),uint120,uint112,uint112,uint112),uint112,uint128,uint128)"(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xReserve: BigNumberish,
      yAdjusted: BigNumberish,
      zAdjusted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  checkConstantProduct(
    state: {
      reserves: { asset: BigNumberish; collateral: BigNumberish };
      totalLiquidity: BigNumberish;
      totalClaims: { bond: BigNumberish; insurance: BigNumberish };
      totalDebtCreated: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      z: BigNumberish;
    },
    xReserve: BigNumberish,
    yAdjusted: BigNumberish,
    zAdjusted: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkConstantProduct(((uint128,uint128),uint256,(uint128,uint128),uint120,uint112,uint112,uint112),uint112,uint128,uint128)"(
    state: {
      reserves: { asset: BigNumberish; collateral: BigNumberish };
      totalLiquidity: BigNumberish;
      totalClaims: { bond: BigNumberish; insurance: BigNumberish };
      totalDebtCreated: BigNumberish;
      x: BigNumberish;
      y: BigNumberish;
      z: BigNumberish;
    },
    xReserve: BigNumberish,
    yAdjusted: BigNumberish,
    zAdjusted: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    checkConstantProduct(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xReserve: BigNumberish,
      yAdjusted: BigNumberish,
      zAdjusted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkConstantProduct(((uint128,uint128),uint256,(uint128,uint128),uint120,uint112,uint112,uint112),uint112,uint128,uint128)"(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xReserve: BigNumberish,
      yAdjusted: BigNumberish,
      zAdjusted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    checkConstantProduct(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xReserve: BigNumberish,
      yAdjusted: BigNumberish,
      zAdjusted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkConstantProduct(((uint128,uint128),uint256,(uint128,uint128),uint120,uint112,uint112,uint112),uint112,uint128,uint128)"(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xReserve: BigNumberish,
      yAdjusted: BigNumberish,
      zAdjusted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkConstantProduct(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xReserve: BigNumberish,
      yAdjusted: BigNumberish,
      zAdjusted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkConstantProduct(((uint128,uint128),uint256,(uint128,uint128),uint120,uint112,uint112,uint112),uint112,uint128,uint128)"(
      state: {
        reserves: { asset: BigNumberish; collateral: BigNumberish };
        totalLiquidity: BigNumberish;
        totalClaims: { bond: BigNumberish; insurance: BigNumberish };
        totalDebtCreated: BigNumberish;
        x: BigNumberish;
        y: BigNumberish;
        z: BigNumberish;
      },
      xReserve: BigNumberish,
      yAdjusted: BigNumberish,
      zAdjusted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
