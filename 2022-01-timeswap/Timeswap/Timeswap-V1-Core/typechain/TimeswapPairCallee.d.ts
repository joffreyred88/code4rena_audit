/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TimeswapPairCalleeInterface extends ethers.utils.Interface {
  functions: {
    "borrow(uint256,address,address,uint112,uint112,uint112)": FunctionFragment;
    "factoryContract()": FunctionFragment;
    "getData(address)": FunctionFragment;
    "getDataMint(address)": FunctionFragment;
    "lend(uint256,address,address,uint112,uint112,uint112)": FunctionFragment;
    "mint(uint256,address,uint112,uint112,uint112)": FunctionFragment;
    "pairContract()": FunctionFragment;
    "pay(uint256,address,address,uint256[],uint112[],uint112[])": FunctionFragment;
    "timeswapBorrowCallback(uint112,bytes)": FunctionFragment;
    "timeswapLendCallback(uint112,bytes)": FunctionFragment;
    "timeswapMintCallback(uint112,uint112,bytes)": FunctionFragment;
    "timeswapPayCallback(uint128,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "factoryContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getData", values: [string]): string;
  encodeFunctionData(functionFragment: "getDataMint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lend",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pairContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "timeswapBorrowCallback",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timeswapLendCallback",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timeswapMintCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timeswapPayCallback",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "factoryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDataMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeswapBorrowCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeswapLendCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeswapMintCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeswapPayCallback",
    data: BytesLike
  ): Result;

  events: {};
}

export class TimeswapPairCallee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TimeswapPairCalleeInterface;

  functions: {
    borrow(
      maturity: BigNumberish,
      assetTo: string,
      dueTo: string,
      xDecrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(uint256,address,address,uint112,uint112,uint112)"(
      maturity: BigNumberish,
      assetTo: string,
      dueTo: string,
      xDecrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factoryContract(overrides?: CallOverrides): Promise<[string]>;

    "factoryContract()"(overrides?: CallOverrides): Promise<[string]>;

    getData(
      from: string,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    "getData(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getDataMint(
      from: string,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    "getDataMint(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    lend(
      maturity: BigNumberish,
      bondTo: string,
      insuranceTo: string,
      xIncrease: BigNumberish,
      yDecrease: BigNumberish,
      zDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lend(uint256,address,address,uint112,uint112,uint112)"(
      maturity: BigNumberish,
      bondTo: string,
      insuranceTo: string,
      xIncrease: BigNumberish,
      yDecrease: BigNumberish,
      zDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      maturity: BigNumberish,
      liquidityTo: string,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint(uint256,address,uint112,uint112,uint112)"(
      maturity: BigNumberish,
      liquidityTo: string,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pairContract(overrides?: CallOverrides): Promise<[string]>;

    "pairContract()"(overrides?: CallOverrides): Promise<[string]>;

    pay(
      maturity: BigNumberish,
      to: string,
      owner: string,
      ids: BigNumberish[],
      assetsIn: BigNumberish[],
      collateralsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pay(uint256,address,address,uint256[],uint112[],uint112[])"(
      maturity: BigNumberish,
      to: string,
      owner: string,
      ids: BigNumberish[],
      assetsIn: BigNumberish[],
      collateralsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeswapBorrowCallback(
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "timeswapBorrowCallback(uint112,bytes)"(
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeswapLendCallback(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "timeswapLendCallback(uint112,bytes)"(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeswapMintCallback(
      assetIn: BigNumberish,
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "timeswapMintCallback(uint112,uint112,bytes)"(
      assetIn: BigNumberish,
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeswapPayCallback(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "timeswapPayCallback(uint128,bytes)"(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  borrow(
    maturity: BigNumberish,
    assetTo: string,
    dueTo: string,
    xDecrease: BigNumberish,
    yIncrease: BigNumberish,
    zIncrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(uint256,address,address,uint112,uint112,uint112)"(
    maturity: BigNumberish,
    assetTo: string,
    dueTo: string,
    xDecrease: BigNumberish,
    yIncrease: BigNumberish,
    zIncrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factoryContract(overrides?: CallOverrides): Promise<string>;

  "factoryContract()"(overrides?: CallOverrides): Promise<string>;

  getData(from: string, overrides?: CallOverrides): Promise<string>;

  "getData(address)"(from: string, overrides?: CallOverrides): Promise<string>;

  getDataMint(from: string, overrides?: CallOverrides): Promise<string>;

  "getDataMint(address)"(
    from: string,
    overrides?: CallOverrides
  ): Promise<string>;

  lend(
    maturity: BigNumberish,
    bondTo: string,
    insuranceTo: string,
    xIncrease: BigNumberish,
    yDecrease: BigNumberish,
    zDecrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lend(uint256,address,address,uint112,uint112,uint112)"(
    maturity: BigNumberish,
    bondTo: string,
    insuranceTo: string,
    xIncrease: BigNumberish,
    yDecrease: BigNumberish,
    zDecrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    maturity: BigNumberish,
    liquidityTo: string,
    xIncrease: BigNumberish,
    yIncrease: BigNumberish,
    zIncrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint(uint256,address,uint112,uint112,uint112)"(
    maturity: BigNumberish,
    liquidityTo: string,
    xIncrease: BigNumberish,
    yIncrease: BigNumberish,
    zIncrease: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pairContract(overrides?: CallOverrides): Promise<string>;

  "pairContract()"(overrides?: CallOverrides): Promise<string>;

  pay(
    maturity: BigNumberish,
    to: string,
    owner: string,
    ids: BigNumberish[],
    assetsIn: BigNumberish[],
    collateralsOut: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pay(uint256,address,address,uint256[],uint112[],uint112[])"(
    maturity: BigNumberish,
    to: string,
    owner: string,
    ids: BigNumberish[],
    assetsIn: BigNumberish[],
    collateralsOut: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeswapBorrowCallback(
    collateralIn: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "timeswapBorrowCallback(uint112,bytes)"(
    collateralIn: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeswapLendCallback(
    assetIn: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "timeswapLendCallback(uint112,bytes)"(
    assetIn: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeswapMintCallback(
    assetIn: BigNumberish,
    collateralIn: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "timeswapMintCallback(uint112,uint112,bytes)"(
    assetIn: BigNumberish,
    collateralIn: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeswapPayCallback(
    assetIn: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "timeswapPayCallback(uint128,bytes)"(
    assetIn: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrow(
      maturity: BigNumberish,
      assetTo: string,
      dueTo: string,
      xDecrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        }
      ] & {
        id: BigNumber;
        dueOut: [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        };
      }
    >;

    "borrow(uint256,address,address,uint112,uint112,uint112)"(
      maturity: BigNumberish,
      assetTo: string,
      dueTo: string,
      xDecrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        }
      ] & {
        id: BigNumber;
        dueOut: [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        };
      }
    >;

    factoryContract(overrides?: CallOverrides): Promise<string>;

    "factoryContract()"(overrides?: CallOverrides): Promise<string>;

    getData(from: string, overrides?: CallOverrides): Promise<string>;

    "getData(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getDataMint(from: string, overrides?: CallOverrides): Promise<string>;

    "getDataMint(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<string>;

    lend(
      maturity: BigNumberish,
      bondTo: string,
      insuranceTo: string,
      xIncrease: BigNumberish,
      yDecrease: BigNumberish,
      zDecrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { bond: BigNumber; insurance: BigNumber }
    >;

    "lend(uint256,address,address,uint112,uint112,uint112)"(
      maturity: BigNumberish,
      bondTo: string,
      insuranceTo: string,
      xIncrease: BigNumberish,
      yDecrease: BigNumberish,
      zDecrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { bond: BigNumber; insurance: BigNumber }
    >;

    mint(
      maturity: BigNumberish,
      liquidityTo: string,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        }
      ] & {
        liquidityOut: BigNumber;
        id: BigNumber;
        dueOut: [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        };
      }
    >;

    "mint(uint256,address,uint112,uint112,uint112)"(
      maturity: BigNumberish,
      liquidityTo: string,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        }
      ] & {
        liquidityOut: BigNumber;
        id: BigNumber;
        dueOut: [BigNumber, BigNumber, number] & {
          debt: BigNumber;
          collateral: BigNumber;
          startBlock: number;
        };
      }
    >;

    pairContract(overrides?: CallOverrides): Promise<string>;

    "pairContract()"(overrides?: CallOverrides): Promise<string>;

    pay(
      maturity: BigNumberish,
      to: string,
      owner: string,
      ids: BigNumberish[],
      assetsIn: BigNumberish[],
      collateralsOut: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { assetIn: BigNumber; collateralOut: BigNumber }
    >;

    "pay(uint256,address,address,uint256[],uint112[],uint112[])"(
      maturity: BigNumberish,
      to: string,
      owner: string,
      ids: BigNumberish[],
      assetsIn: BigNumberish[],
      collateralsOut: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { assetIn: BigNumber; collateralOut: BigNumber }
    >;

    timeswapBorrowCallback(
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "timeswapBorrowCallback(uint112,bytes)"(
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    timeswapLendCallback(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "timeswapLendCallback(uint112,bytes)"(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    timeswapMintCallback(
      assetIn: BigNumberish,
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "timeswapMintCallback(uint112,uint112,bytes)"(
      assetIn: BigNumberish,
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    timeswapPayCallback(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "timeswapPayCallback(uint128,bytes)"(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    borrow(
      maturity: BigNumberish,
      assetTo: string,
      dueTo: string,
      xDecrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(uint256,address,address,uint112,uint112,uint112)"(
      maturity: BigNumberish,
      assetTo: string,
      dueTo: string,
      xDecrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factoryContract(overrides?: CallOverrides): Promise<BigNumber>;

    "factoryContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    getData(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getData(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataMint(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getDataMint(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(
      maturity: BigNumberish,
      bondTo: string,
      insuranceTo: string,
      xIncrease: BigNumberish,
      yDecrease: BigNumberish,
      zDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lend(uint256,address,address,uint112,uint112,uint112)"(
      maturity: BigNumberish,
      bondTo: string,
      insuranceTo: string,
      xIncrease: BigNumberish,
      yDecrease: BigNumberish,
      zDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      maturity: BigNumberish,
      liquidityTo: string,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint(uint256,address,uint112,uint112,uint112)"(
      maturity: BigNumberish,
      liquidityTo: string,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pairContract(overrides?: CallOverrides): Promise<BigNumber>;

    "pairContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    pay(
      maturity: BigNumberish,
      to: string,
      owner: string,
      ids: BigNumberish[],
      assetsIn: BigNumberish[],
      collateralsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pay(uint256,address,address,uint256[],uint112[],uint112[])"(
      maturity: BigNumberish,
      to: string,
      owner: string,
      ids: BigNumberish[],
      assetsIn: BigNumberish[],
      collateralsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeswapBorrowCallback(
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "timeswapBorrowCallback(uint112,bytes)"(
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeswapLendCallback(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "timeswapLendCallback(uint112,bytes)"(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeswapMintCallback(
      assetIn: BigNumberish,
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "timeswapMintCallback(uint112,uint112,bytes)"(
      assetIn: BigNumberish,
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeswapPayCallback(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "timeswapPayCallback(uint128,bytes)"(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrow(
      maturity: BigNumberish,
      assetTo: string,
      dueTo: string,
      xDecrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(uint256,address,address,uint112,uint112,uint112)"(
      maturity: BigNumberish,
      assetTo: string,
      dueTo: string,
      xDecrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factoryContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factoryContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getData(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getData(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataMint(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDataMint(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lend(
      maturity: BigNumberish,
      bondTo: string,
      insuranceTo: string,
      xIncrease: BigNumberish,
      yDecrease: BigNumberish,
      zDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lend(uint256,address,address,uint112,uint112,uint112)"(
      maturity: BigNumberish,
      bondTo: string,
      insuranceTo: string,
      xIncrease: BigNumberish,
      yDecrease: BigNumberish,
      zDecrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      maturity: BigNumberish,
      liquidityTo: string,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint(uint256,address,uint112,uint112,uint112)"(
      maturity: BigNumberish,
      liquidityTo: string,
      xIncrease: BigNumberish,
      yIncrease: BigNumberish,
      zIncrease: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pairContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pairContract()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pay(
      maturity: BigNumberish,
      to: string,
      owner: string,
      ids: BigNumberish[],
      assetsIn: BigNumberish[],
      collateralsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pay(uint256,address,address,uint256[],uint112[],uint112[])"(
      maturity: BigNumberish,
      to: string,
      owner: string,
      ids: BigNumberish[],
      assetsIn: BigNumberish[],
      collateralsOut: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeswapBorrowCallback(
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "timeswapBorrowCallback(uint112,bytes)"(
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeswapLendCallback(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "timeswapLendCallback(uint112,bytes)"(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeswapMintCallback(
      assetIn: BigNumberish,
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "timeswapMintCallback(uint112,uint112,bytes)"(
      assetIn: BigNumberish,
      collateralIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeswapPayCallback(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "timeswapPayCallback(uint128,bytes)"(
      assetIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
