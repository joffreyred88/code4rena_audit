digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
state.reserves.asset >= state.totalClaims.bond

IRs:
REF_413(IPair.Tokens) -> state.reserves
REF_414(uint128) -> REF_413.asset
REF_415(IPair.Claims) -> state.totalClaims
REF_416(uint128) -> REF_415.bond
TMP_500(bool) = REF_414 >= REF_416
CONDITION TMP_500"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
assetOut = bondIn

IRs:
assetOut(uint128) := bondIn(uint128)
RETURN assetOut"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_assetOut = bondIn

IRs:
_assetOut(uint256) := bondIn(uint128)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_assetOut *= state.reserves.asset

IRs:
REF_417(IPair.Tokens) -> state.reserves
REF_418(uint128) -> REF_417.asset
_assetOut(uint256) = _assetOut (c)* REF_418"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_assetOut /= state.totalClaims.bond

IRs:
REF_419(IPair.Claims) -> state.totalClaims
REF_420(uint128) -> REF_419.bond
_assetOut(uint256) = _assetOut (c)/ REF_420"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
assetOut = _assetOut.toUint128()

IRs:
TMP_501(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['_assetOut'] 
assetOut(uint128) := TMP_501(uint128)"];
}
