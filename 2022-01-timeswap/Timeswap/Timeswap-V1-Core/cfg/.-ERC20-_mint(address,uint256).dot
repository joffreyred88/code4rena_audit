digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(account != address(0),ERC20: mint to the zero address)

IRs:
TMP_33 = CONVERT 0 to address
TMP_34(bool) = account != TMP_33
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,ERC20: mint to the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_beforeTokenTransfer(address(0),account,amount)

IRs:
TMP_36 = CONVERT 0 to address
INTERNAL_CALL, ERC20._beforeTokenTransfer(address,address,uint256)(TMP_36,account,amount)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_totalSupply += amount

IRs:
_totalSupply(uint256) = _totalSupply (c)+ amount"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balances[account] += amount

IRs:
REF_12(uint256) -> _balances[account]
REF_12(-> _balances) = REF_12 (c)+ amount"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),account,amount)

IRs:
TMP_38 = CONVERT 0 to address
Emit Transfer(TMP_38.account.amount)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_afterTokenTransfer(address(0),account,amount)

IRs:
TMP_40 = CONVERT 0 to address
INTERNAL_CALL, ERC20._afterTokenTransfer(address,address,uint256)(TMP_40,account,amount)"];
}
