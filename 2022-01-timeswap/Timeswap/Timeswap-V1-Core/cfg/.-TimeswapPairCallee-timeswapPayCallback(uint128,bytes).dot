digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
(asset,collateral,from) = abi.decode(data,(IERC20,IERC20,address))

IRs:
TUPLE_13(IERC20,IERC20,address) = SOLIDITY_CALL abi.decode()(data(IERC20,IERC20,address))
asset(IERC20)= UNPACK TUPLE_13 index: 0 
collateral(IERC20)= UNPACK TUPLE_13 index: 1 
from(address)= UNPACK TUPLE_13 index: 2 "];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
pair = factoryContract.getPair(asset,collateral)

IRs:
TMP_609(IPair) = HIGH_LEVEL_CALL, dest:factoryContract(IFactory), function:getPair, arguments:['asset', 'collateral']  
pair(IPair) := TMP_609(IPair)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
asset.transferFrom(from,address(pair),assetIn)

IRs:
TMP_610 = CONVERT pair to address
TMP_611(bool) = HIGH_LEVEL_CALL, dest:asset(IERC20), function:transferFrom, arguments:['from', 'TMP_610', 'assetIn']  "];
}
