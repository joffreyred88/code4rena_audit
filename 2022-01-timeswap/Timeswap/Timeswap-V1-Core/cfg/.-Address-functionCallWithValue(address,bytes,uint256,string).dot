digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)

IRs:
TMP_98 = CONVERT this to address
REF_41 -> BALANCE TMP_98
TMP_99(bool) = REF_41 >= value
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,Address: insufficient balance for call)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(isContract(target),Address: call to non-contract)

IRs:
TMP_101(bool) = INTERNAL_CALL, Address.isContract(address)(target)
TMP_102(None) = SOLIDITY_CALL require(bool,string)(TMP_101,Address: call to non-contract)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
(success,returndata) = target.call{value: value}(data)

IRs:
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:target, function:call, arguments:['data'] value:value 
success(bool)= UNPACK TUPLE_1 index: 0 
returndata(bytes)= UNPACK TUPLE_1 index: 1 "];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
verifyCallResult(success,returndata,errorMessage)

IRs:
TMP_103(bytes) = INTERNAL_CALL, Address.verifyCallResult(bool,bytes,string)(success,returndata,errorMessage)
RETURN TMP_103"];
}
