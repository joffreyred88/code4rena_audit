digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_transfer(sender,recipient,amount)

IRs:
INTERNAL_CALL, ERC20._transfer(address,address,uint256)(sender,recipient,amount)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
currentAllowance = _allowances[sender][_msgSender()]

IRs:
REF_3(mapping(address => uint256)) -> _allowances[sender]
TMP_5(address) = INTERNAL_CALL, Context._msgSender()()
REF_4(uint256) -> REF_3[TMP_5]
currentAllowance(uint256) := REF_4(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(currentAllowance >= amount,ERC20: transfer amount exceeds allowance)

IRs:
TMP_6(bool) = currentAllowance >= amount
TMP_7(None) = SOLIDITY_CALL require(bool,string)(TMP_6,ERC20: transfer amount exceeds allowance)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_approve(sender,_msgSender(),currentAllowance - amount)

IRs:
TMP_8(address) = INTERNAL_CALL, Context._msgSender()()
TMP_9(uint256) = currentAllowance - amount
INTERNAL_CALL, ERC20._approve(address,address,uint256)(sender,TMP_8,TMP_9)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
