digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
success

IRs:
CONDITION success"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
returndata

IRs:
RETURN returndata"];
3[label="Node Type: IF 3

EXPRESSION:
returndata.length > 0

IRs:
REF_45 -> LENGTH returndata
TMP_112(bool) = REF_45 > 0
CONDITION TMP_112"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: INLINE ASM 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
returndata_size_verifyCallResult_asm_0 = mload(uint256)(returndata)

IRs:
TMP_113(uint256) = SOLIDITY_CALL mload(uint256)(returndata)
returndata_size_verifyCallResult_asm_0(uint256) := TMP_113(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
revert(uint256,uint256)(32 + returndata,returndata_size_verifyCallResult_asm_0)

IRs:
TMP_114(uint256) = 32 + returndata
TMP_115(None) = SOLIDITY_CALL revert(uint256,uint256)(TMP_114,returndata_size_verifyCallResult_asm_0)"];
7->9;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
revert(string)(errorMessage)

IRs:
TMP_116(None) = SOLIDITY_CALL revert(string)(errorMessage)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
}
