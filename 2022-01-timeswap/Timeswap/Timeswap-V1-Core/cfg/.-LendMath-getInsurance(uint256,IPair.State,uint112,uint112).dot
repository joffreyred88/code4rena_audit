digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_insuranceOut = maturity

IRs:
_insuranceOut(uint256) := maturity(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_insuranceOut -= block.timestamp

IRs:
_insuranceOut(uint256) = _insuranceOut (c)- block.timestamp"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_insuranceOut *= zDecrease

IRs:
_insuranceOut(uint256) = _insuranceOut (c)* zDecrease"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_insuranceOut >>= 25

IRs:
_insuranceOut(uint256) = _insuranceOut >> 25"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
minimum = state.z

IRs:
REF_388(uint112) -> state.z
minimum(uint256) := REF_388(uint112)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
minimum *= xIncrease

IRs:
minimum(uint256) = minimum (c)* xIncrease"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
denominator = state.x

IRs:
REF_389(uint112) -> state.x
denominator(uint256) := REF_389(uint112)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
denominator += xIncrease

IRs:
denominator(uint256) = denominator (c)+ xIncrease"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
minimum /= denominator

IRs:
minimum(uint256) = minimum (c)/ denominator"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_insuranceOut += minimum

IRs:
_insuranceOut(uint256) = _insuranceOut (c)+ minimum"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
insuranceOut = _insuranceOut.toUint128()

IRs:
TMP_449(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['_insuranceOut'] 
insuranceOut(uint128) := TMP_449(uint128)"];
}
