digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
balanceBefore = totalUnderlying()

IRs:
TMP_927(uint256) = INTERNAL_CALL, Vault.totalUnderlying()()
balanceBefore(uint256) := TMP_927(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
underlying.safeTransferFrom(_from,address(this),_amount)

IRs:
TMP_928 = CONVERT this to address
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['underlying', '_from', 'TMP_928', '_amount'] "];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
balanceAfter = totalUnderlying()

IRs:
TMP_930(uint256) = INTERNAL_CALL, Vault.totalUnderlying()()
balanceAfter(uint256) := TMP_930(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(balanceAfter == balanceBefore + _amount,Vault: amount received does not match params)

IRs:
TMP_931(uint256) = balanceBefore (c)+ _amount
TMP_932(bool) = balanceAfter == TMP_931
TMP_933(None) = SOLIDITY_CALL require(bool,string)(TMP_932,Vault: amount received does not match params)"];
}
