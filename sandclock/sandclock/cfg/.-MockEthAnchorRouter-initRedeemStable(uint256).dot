digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(pendingOperator != address(0))

IRs:
TMP_614 = CONVERT 0 to address
TMP_615(bool) = pendingOperator != TMP_614
TMP_616(None) = SOLIDITY_CALL require(bool)(TMP_615)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
aUstToken.safeTransferFrom(msg.sender,address(this),_amount)

IRs:
TMP_617 = CONVERT this to address
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['aUstToken', 'msg.sender', 'TMP_617', '_amount'] "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
redeemOperations[pendingOperator] = _amount

IRs:
REF_203(uint256) -> redeemOperations[pendingOperator]
REF_203 (->redeemOperations) := _amount(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
operator = pendingOperator

IRs:
operator(address) := pendingOperator(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
pendingOperator = address(0)

IRs:
TMP_619 = CONVERT 0 to address
pendingOperator(address) := TMP_619(address)"];
}
