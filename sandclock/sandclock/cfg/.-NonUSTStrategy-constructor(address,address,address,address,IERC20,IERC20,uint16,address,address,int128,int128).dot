digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(underlying != _ustToken,invalid underlying)

IRs:
TMP_1175(bool) = underlying != _ustToken
TMP_1176(None) = SOLIDITY_CALL require(bool,string)(TMP_1175,invalid underlying)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_curvePool != address(0),0x addr)

IRs:
TMP_1177 = CONVERT 0 to address
TMP_1178(bool) = _curvePool != TMP_1177
TMP_1179(None) = SOLIDITY_CALL require(bool,string)(TMP_1178,0x addr)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
curvePool = ICurve(_curvePool)

IRs:
TMP_1180 = CONVERT _curvePool to ICurve
curvePool(ICurve) := TMP_1180(ICurve)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
underlyingI = _underlyingI

IRs:
underlyingI(int128) := _underlyingI(int128)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ustI = _ustI

IRs:
ustI(int128) := _ustI(int128)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
ustToken.safeApprove(_curvePool,type()(uint256).max)

IRs:
TMP_1182(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeApprove(IERC20,address,uint256), arguments:['ustToken', '_curvePool', 'TMP_1182'] "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
underlying.safeApprove(_curvePool,type()(uint256).max)

IRs:
TMP_1185(uint256) := 115792089237316195423570985008687907853269984665640564039457584007913129639935(uint256)
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeApprove(IERC20,address,uint256), arguments:['underlying', '_curvePool', 'TMP_1185'] "];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
BaseStrategy(_vault,_treasury,_ethAnchorRouter,_exchangeRateFeeder,_ustToken,_aUstToken,_perfFeePct,_owner)

IRs:
INTERNAL_CALL, BaseStrategy.constructor(address,address,address,address,IERC20,IERC20,uint16,address)(_vault,_treasury,_ethAnchorRouter,_exchangeRateFeeder,_ustToken,_aUstToken,_perfFeePct,_owner)"];
8->1;
}
