digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
localTokenId = _tokenIds.current()

IRs:
TMP_1628(uint256) = LIBRARY_CALL, dest:Counters, function:Counters.current(Counters.Counter), arguments:['_tokenIds'] 
localTokenId(uint256) := TMP_1628(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_tokenIds.increment()

IRs:
LIBRARY_CALL, dest:Counters, function:Counters.increment(Counters.Counter), arguments:['_tokenIds'] "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_safeMint(_owner,localTokenId)

IRs:
INTERNAL_CALL, ERC721._safeMint(address,uint256)(_owner,localTokenId)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
deposits[localTokenId] = Deposit(_amount,_claimerId,_lockedUntil)

IRs:
REF_645(Depositors.Deposit) -> deposits[localTokenId]
TMP_1631 = new Deposit(_amount,_claimerId,_lockedUntil)
REF_645 (->deposits) := TMP_1631(Depositors.Deposit)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
localTokenId

IRs:
RETURN localTokenId"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyVault()

IRs:
MODIFIER_CALL, Depositors.onlyVault()()"];
6->1;
}
