digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
localTotalShares = totalShares()

IRs:
TMP_391(uint256) = INTERNAL_CALL, Vault.totalShares()()
localTotalShares(uint256) := TMP_391(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
localTotalPrincipal = totalUnderlyingMinusSponsored()

IRs:
TMP_392(uint256) = INTERNAL_CALL, Vault.totalUnderlyingMinusSponsored()()
localTotalPrincipal(uint256) := TMP_392(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->10;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < _ids.length

IRs:
REF_123 -> LENGTH _ids
TMP_393(bool) = i < REF_123
CONDITION TMP_393"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
amount += _withdrawDeposit(_ids[i],localTotalShares,localTotalPrincipal,_to,_force)

IRs:
REF_124(uint256) -> _ids[i]
TMP_394(uint256) = INTERNAL_CALL, Vault._withdrawDeposit(uint256,uint256,uint256,address,bool)(REF_124,localTotalShares,localTotalPrincipal,_to,_force)
amount(uint256) = amount (c)+ TMP_394"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_395(uint8) := i(uint8)
i(uint8) = i (c)+ 1"];
9->7;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
underlying.safeTransfer(_to,amount)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['underlying', '_to', 'amount'] "];
}
