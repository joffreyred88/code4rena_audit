digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
aUstBalance = _getAUstBalance()

IRs:
TMP_1035(uint256) = INTERNAL_CALL, BaseStrategy._getAUstBalance()()
aUstBalance(uint256) := TMP_1035(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
aUstBalance > 0

IRs:
TMP_1036(bool) = aUstBalance > 0
CONDITION TMP_1036"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
initRedeemStable(aUstBalance)

IRs:
INTERNAL_CALL, BaseStrategy.initRedeemStable(uint256)(aUstBalance)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
underlyingBalance = _getUnderlyingBalance()

IRs:
TMP_1038(uint256) = INTERNAL_CALL, BaseStrategy._getUnderlyingBalance()()
underlyingBalance(uint256) := TMP_1038(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
underlyingBalance > 0

IRs:
TMP_1039(bool) = underlyingBalance > 0
CONDITION TMP_1039"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
underlying.safeTransfer(vault,underlyingBalance)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['underlying', 'vault', 'underlyingBalance'] "];
7->8;
8[label="Node Type: END_IF 8
"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
restricted()

IRs:
MODIFIER_CALL, BaseStrategy.restricted()()"];
9->1;
}
