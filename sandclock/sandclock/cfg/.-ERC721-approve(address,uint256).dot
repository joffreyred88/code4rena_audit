digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = ERC721.ownerOf(tokenId)

IRs:
TMP_113(address) = INTERNAL_CALL, ERC721.ownerOf(uint256)(tokenId)
owner(address) := TMP_113(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(to != owner,ERC721: approval to current owner)

IRs:
TMP_114(bool) = to != owner
TMP_115(None) = SOLIDITY_CALL require(bool,string)(TMP_114,ERC721: approval to current owner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_msgSender() == owner || isApprovedForAll(owner,_msgSender()),ERC721: approve caller is not owner nor approved for all)

IRs:
TMP_116(address) = INTERNAL_CALL, Context._msgSender()()
TMP_117(bool) = TMP_116 == owner
TMP_118(address) = INTERNAL_CALL, Context._msgSender()()
TMP_119(bool) = INTERNAL_CALL, ERC721.isApprovedForAll(address,address)(owner,TMP_118)
TMP_120(bool) = TMP_117 || TMP_119
TMP_121(None) = SOLIDITY_CALL require(bool,string)(TMP_120,ERC721: approve caller is not owner nor approved for all)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_approve(to,tokenId)

IRs:
INTERNAL_CALL, ERC721._approve(address,uint256)(to,tokenId)"];
}
