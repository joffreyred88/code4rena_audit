digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->18;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _ids.length

IRs:
REF_126 -> LENGTH _ids
TMP_397(bool) = i < REF_126
CONDITION TMP_397"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tokenId = _ids[i]

IRs:
REF_127(uint256) -> _ids[i]
tokenId(uint256) := REF_127(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(depositors.ownerOf(tokenId) == _msgSender(),Vault: you are not the owner of a sponsor)

IRs:
TMP_398(address) = HIGH_LEVEL_CALL, dest:depositors(Depositors), function:ownerOf, arguments:['tokenId']  
TMP_399(address) = INTERNAL_CALL, Context._msgSender()()
TMP_400(bool) = TMP_398 == TMP_399
TMP_401(None) = SOLIDITY_CALL require(bool,string)(TMP_400,Vault: you are not the owner of a sponsor)"];
7->8;
8[label="Node Type: NEW VARIABLE 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
(depositAmount,claimerId,lockedUntil) = depositors.deposits(tokenId)

IRs:
TUPLE_4(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:depositors(Depositors), function:deposits, arguments:['tokenId']  
depositAmount(uint256)= UNPACK TUPLE_4 index: 0 
claimerId(uint256)= UNPACK TUPLE_4 index: 1 
lockedUntil(uint256)= UNPACK TUPLE_4 index: 2 "];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
require(bool,string)(lockedUntil <= block.timestamp,Vault: amount is locked)

IRs:
TMP_402(bool) = lockedUntil <= block.timestamp
TMP_403(None) = SOLIDITY_CALL require(bool,string)(TMP_402,Vault: amount is locked)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool,string)(claimerId == 0,Vault: token id is not a sponsor)

IRs:
TMP_404(bool) = claimerId == 0
TMP_405(None) = SOLIDITY_CALL require(bool,string)(TMP_404,Vault: token id is not a sponsor)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
depositors.burn(tokenId)

IRs:
HIGH_LEVEL_CALL, dest:depositors(Depositors), function:burn, arguments:['tokenId']  "];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
Unsponsored(tokenId)

IRs:
Emit Unsponsored(tokenId)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
sponsorAmount += depositAmount

IRs:
sponsorAmount(uint256) = sponsorAmount (c)+ depositAmount"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_408(uint8) := i(uint8)
i(uint8) = i (c)+ 1"];
17->5;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
sponsorToTransfer = sponsorAmount

IRs:
sponsorToTransfer(uint256) := sponsorAmount(uint256)"];
18->19;
19[label="Node Type: IF 19

EXPRESSION:
_force && sponsorAmount > totalUnderlying()

IRs:
TMP_409(uint256) = INTERNAL_CALL, Vault.totalUnderlying()()
TMP_410(bool) = sponsorAmount > TMP_409
TMP_411(bool) = _force && TMP_410
CONDITION TMP_411"];
19->20[label="True"];
19->21[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
sponsorToTransfer = totalUnderlying()

IRs:
TMP_412(uint256) = INTERNAL_CALL, Vault.totalUnderlying()()
sponsorToTransfer(uint256) := TMP_412(uint256)"];
20->24;
21[label="Node Type: IF 21

EXPRESSION:
! _force

IRs:
TMP_413 = ! _force 
CONDITION TMP_413"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
require(bool,string)(sponsorToTransfer <= totalUnderlying(),Vault: not enough funds to unsponsor)

IRs:
TMP_414(uint256) = INTERNAL_CALL, Vault.totalUnderlying()()
TMP_415(bool) = sponsorToTransfer <= TMP_414
TMP_416(None) = SOLIDITY_CALL require(bool,string)(TMP_415,Vault: not enough funds to unsponsor)"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
totalSponsored -= sponsorAmount

IRs:
totalSponsored(uint256) = totalSponsored (c)- sponsorAmount"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
underlying.safeTransfer(_to,sponsorToTransfer)

IRs:
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['underlying', '_to', 'sponsorToTransfer'] "];
}
