digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokens[i].safeTransferFrom(msg.sender,address(this),dx)

IRs:
REF_167(IERC20) -> tokens[i]
TMP_518 = CONVERT this to address
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['REF_167', 'msg.sender', 'TMP_518', 'dx'] "];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amount = (dx * 1e18) / rate[i][j]

IRs:
TMP_520(uint256) = dx (c)* 1000000000000000000
REF_169(mapping(int128 => uint256)) -> rate[i]
REF_170(uint256) -> REF_169[j]
TMP_521(uint256) = TMP_520 (c)/ REF_170
amount(uint256) := TMP_521(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tokens[j].safeTransfer(msg.sender,amount)

IRs:
REF_171(IERC20) -> tokens[j]
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['REF_171', 'msg.sender', 'amount'] "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(amount >= min_dy)

IRs:
TMP_523(bool) = amount >= min_dy
TMP_524(None) = SOLIDITY_CALL require(bool)(TMP_523)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
amount

IRs:
RETURN amount"];
}
